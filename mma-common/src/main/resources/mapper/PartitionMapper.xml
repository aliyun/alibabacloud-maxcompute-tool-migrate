<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aliyun.odps.mma.mapper.PartitionMapper">
    <resultMap id="partitionMap" type="com.aliyun.odps.mma.model.PartitionModel">
        <result column="source_id" property="sourceId"/>
        <result column="db_id" property="dbId"/>
        <result column="table_id" property="tableId"/>
        <result column="db_name" property="dbName"/>
        <result column="schema_name" property="schemaName"/>
        <result column="table_name" property="tableName"/>
        <result column="num_rows" property="numRows"/>
        <result column="create_time"  property="createTime" typeHandler="org.apache.ibatis.type.DateTypeHandler" />
        <result column="update_time"  property="updateTime" typeHandler="org.apache.ibatis.type.DateTypeHandler" />
        <result column="last_ddl_time"  property="lastDdlTime" typeHandler="org.apache.ibatis.type.DateTypeHandler" />
    </resultMap>

    <select id="getPartitionsOfDataSource" resultMap="partitionMap">
        select partition_model.* from partition_model join datasource on partition_model.source_id = datasource.id where datasource.name=#{sourceName}
    </select>

    <select id="getPartitionsByDsId" resultMap="partitionMap">
        select * from partition_model where source_id=#{sourceId}
    </select>

    <select id="getPartitionsBasicByDsId" resultMap="partitionMap">
        select id, db_name, table_name, schema_name, value, size, num_rows, last_ddl_time, status
        from partition_model
        where source_id=#{sourceId} and id > #{marker}
        order by id
        limit 0, #{maxItem}
    </select>

    <select id="getPartitionsOfTable" resultMap="partitionMap">
        select * from partition_model where table_id=#{tableId}
    </select>

    <select id="getPartitionsOfTask" resultMap="partitionMap">
        select partition_model.* from partition_model join task_partition on partition_model.id = task_partition.partition_id
        where task_partition.task_id=#{taskId}
    </select>

    <select id="getPartitionIdsOfTask" resultType="java.lang.Integer">
        select partition_id from task_partition where task_id=#{taskId}
    </select>

    <select id="getPartitionsOfTableBasic" resultMap="partitionMap">
        select id, table_id, size, value, status from partition_model where table_id=#{tableId};
    </select>

    <select id="getPartitionsOfTablesBasic" resultMap="partitionMap">
        select id, table_id, size, value, status, updated from partition_model
        <where>
            <foreach item="item" index="index" collection="tableIds" open="table_id in (" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="getPartitionsOfDbsBasic" resultMap="partitionMap">
        select id, db_id, status from partition_model
        <where>
            <foreach item="item" index="index" collection="dbIds" open="db_id in (" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="getPartitionsStatusOfTable" resultType="com.aliyun.odps.mma.constant.MigrationStatus" >
        select status from partition_model where table_id=#{tableId};
    </select>

    <select id="getPartitionById"  resultMap="partitionMap">
        select * from partition_model where id=#{id}
    </select>

    <select id="getPartitionsNumOfTable" resultType="java.lang.Integer">
        select count(*) from partition_model where table_id=#{tableId}
    </select>

    <select id="getPartitions"  resultMap="partitionMap">
        select * from partition_model
        <where>
            <foreach item="item" index="index" collection="ids" open="id in (" separator="," close=")">
                #{item}
            </foreach>
        </where>
    </select>

<!--    <insert id="insertPartition" parameterType="com.aliyun.odps.mma.model.PartitionModel" useGeneratedKeys="true" keyProperty="id" keyColumn="id">-->
    <insert id="insertPartition" parameterType="com.aliyun.odps.mma.model.PartitionModel">
        insert into partition_model
       (source_id, db_id, table_id, db_name, schema_name, table_name, value,
        status,
        size, num_rows, last_ddl_time, create_time
        )
        values
       (
        #{sourceId}, #{dbId}, #{tableId}, #{dbName}, #{schemaName}, #{tableName}, #{value},
        #{status},
        #{size}, #{numRows}, #{lastDdlTime}, now()
        )
    </insert>

    <update id="updatePartition" parameterType="com.aliyun.odps.mma.model.PartitionModel" flushCache="true">
        update
            partition_model
        set
            status=#{status},
            size=#{size},
            num_rows=#{numRows},
            last_ddl_time=#{lastDdlTime},
            updated=true,
            update_time=now()
        where id=#{id}
    </update>

    <update id="updatePartitionsStatus">
        update partition_model a, task_partition b
        <set>
            <if test="status.toString() == 'DONE'">a.status=#{status}, a.updated=0</if>
            <if test="status.toString() != 'DONE'">a.status=#{status}</if>
        </set>

        where a.id = b.partition_id and b.task_id = #{taskId}
    </update>

    <select id="ptStatOfDbs" resultType="Map">
        select count(*) as count, status, db_id as dbId from partition_model
        <where>
            <foreach item="item" index="index" collection="dbIds" open="db_id in (" separator="," close=")">
                #{item}
            </foreach>
        </where>
        group by db_id, status
    </select>

    <select id="ptStatOfTables" resultType="Map">
        select count(*) as count, status, table_id as tableId from partition_model
        <where>
            <foreach item="item" index="index" collection="tableIds" open="table_id in (" separator="," close=")">
                #{item}
            </foreach>
        </where>
        group by table_id, status
    </select>

    <select id="ptStat" resultType="Map">
        select table_id as objId, status  from partition_model
        group by table_id, status
    </select>

    <update id="setPartitionsStatusInitByJobId">
        update partition_model a, task_partition b set a.status='INIT'
        where a.id = b.partition_id
          and b.job_id=#{jobId}
          and status = 'DOING'
    </update>

    <update id="setTerminatedPtStatusInit">
        update partition_model set status='INIT' where status='DOING'
    </update>

    <select id="getPts" resultMap="partitionMap" parameterType="com.aliyun.odps.mma.query.PtFilter">
        select partition_model.*, datasource.name as sourceName from partition_model join datasource on
        partition_model.source_id = datasource.id

        <where>
            <if test="sourceId > 0">
                datasource.id=#{sourceId}
            </if>

            <if test="dbId > 0">
                and partition_model.db_id=#{dbId}
            </if>

            <if test="dbName != null">
                and partition_model.db_name like CONCAT('%', #{dbName}, '%')
            </if>

            <if test="schemaName != null">
                and partition_model.schema_name like CONCAT('%', #{schemaName}, '%')
            </if>

            <if test="tableName != null">
                and partition_model.table_name like CONCAT('%', #{tableName}, '%')
            </if>

            <if test="value != null">
                and partition_model.value like CONCAT('%', #{value}, '%')
            </if>

            <if test="status != null and status.size() > 0">
                and
                <foreach item="st" index="index" collection="status" open="partition_model.status in (" separator="," close=")">
                    #{st}
                </foreach>
            </if>

            <if test="updated == 0 or updated == 1">
                and partition_model.updated=#{updated}
            </if>

            <if test="lastDdlTime != null and lastDdlTime.size() == 2" >
                 and partition_model.last_ddl_time >= #{lastDdlTimeStart} and partition_model.last_ddl_time &lt;= #{lastDdlTimeEnd}
            </if>
        </where>

        order by partition_model.id
        <if test="orders.size() > 0">
            <foreach item="p" index="index" collection="orders" open="," separator="," close="">
                partition_model.${p.name} ${p.order}
            </foreach>
        </if>

        <if test="offset >= 0 and pageSize > 0">
            limit #{offset}, #{pageSize}
        </if>
    </select>

    <select id="getPtsCount" resultType="java.lang.Integer" parameterType="com.aliyun.odps.mma.query.PtFilter">
        select count(*) from partition_model
        <where>
            <if test="sourceId > 0">
                source_id=#{sourceId}
            </if>

            <if test="dbId > 0">
                and db_id=#{dbId}
            </if>

            <if test="dbName != null">
                and db_name like CONCAT('%', #{dbName}, '%')
            </if>

            <if test="schemaName != null">
                and schema_name like CONCAT('%', #{schemaName}, '%')
            </if>

            <if test="tableName != null">
                and `table_name` like CONCAT('%', #{tableName}, '%')
            </if>

            <if test="value != null">
                and `value` like CONCAT('%', #{value}, '%')
            </if>

            <if test="status != null and status.size() > 0">
                and
                <foreach item="st" index="index" collection="status" open="status in (" separator="," close=")">
                    #{st}
                </foreach>
            </if>

            <if test="updated == 0 or updated == 1">
                and updated=${updated}
            </if>

            <if test="lastDdlTime != null and lastDdlTime.size() == 2" >
                and last_ddl_time >= #{lastDdlTimeStart} and last_ddl_time &lt;= #{lastDdlTimeEnd}
            </if>
        </where>
    </select>

    <update id="resetPtStatus">
        update partition_model set status='INIT'
        <where>
            <foreach item="ptId" index="index" collection="ptIds" open="id in (" separator="," close=")">
                #{ptId}
            </foreach>
        </where>
    </update>
</mapper>