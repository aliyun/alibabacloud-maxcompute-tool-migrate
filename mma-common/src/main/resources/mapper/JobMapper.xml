<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aliyun.odps.mma.mapper.JobMapper">
    <resultMap id="jobMap" type="com.aliyun.odps.mma.model.JobModel">
        <result column="source_name"  property="sourceName" />
        <result column="db_name"  property="dbName"  />
        <result column="odps_project" property="dstOdpsProject"/>
        <result column="create_time"  property="createTime" typeHandler="org.apache.ibatis.type.DateTypeHandler" />
        <result column="update_time"  property="updateTime" typeHandler="org.apache.ibatis.type.DateTypeHandler" />
        <result column="config"  property="config" typeHandler="com.aliyun.odps.mma.util.JobConfigHandler" />
    </resultMap>

    <select id="getJobById"  resultMap="jobMap">
        select * from job where id=#{id}
    </select>

    <sql id="jobFilter">
        <where>
            deleted = 0

            <if test="sourceName != null">
                and source_name = #{sourceName}
            </if>

            <if test="dbName != null">
                and db_name = #{dbName}
            </if>

            <if test="dstOdpsProject != null">
                and odps_project = #{dstOdpsProject}
            </if>

            <if test="status != null">
                and status = #{status}  and stopped = 0
            </if>

            <if test="stopped != 0">
                and stopped = 1
            </if>

            <if test="dbId > 0">
                and id in (select job_id from task where db_id=#{dbId} limit 1)
            </if>

            <if test="tableId > 0">
                and id in (select job_id from task where table_id=#{tableId} limit 1)
            </if>

            <if test="taskId > 0">
                and id in (select job_id from task where id=#{taskId})
            </if>
        </where>
    </sql>

    <select id="getJobs"  resultMap="jobMap" parameterType="com.aliyun.odps.mma.query.JobFilter">
        select * from job
        <include refid="jobFilter"></include>

        order by id desc
        <if test="offset >= 0 and pageSize > 0" >
            limit #{offset}, #{pageSize}
        </if>
    </select>

    <select id="getJobsCount" resultType="java.lang.Integer" parameterType="com.aliyun.odps.mma.query.JobFilter">
        select count(*) from job
        <include refid="jobFilter"></include>
    </select>

    <insert id="insertJob" parameterType="com.aliyun.odps.mma.model.JobModel">
        insert into job (id, description, source_name, db_name, odps_project, type, status, config)
        values (
                #{id},
                #{description},
                #{sourceName},
                #{dbName},
                #{dstOdpsProject},
                #{type},
                #{status},
                #{config, typeHandler=com.aliyun.odps.mma.util.JobConfigHandler}
                )
    </insert>

    <select id="maxJobId" resultType="Integer">
        select id from job order by id desc limit 1;
    </select>

    <update id="updateJobsStatus">
        update job set status=#{status}
        <where>
            <foreach item="jobId" index="index" collection="ids" open="id in (" separator="," close=")">
                #{jobId}
            </foreach>
        </where>
    </update>

    <update id="setJobStop">
        update job set stopped=1 where id=#{id}
    </update>

    <update id="setJobRestart">
        update job set restart=1 where id=#{id}
    </update>

    <update id="resetJobStop">
        update job set stopped=0 where id=#{id}
    </update>

    <update id="setFailedTasksOfJobRestart">
        update task set restart=1, start_time=null, stopped=0
        where job_id=#{jobId} and (status in ('SCHEMA_FAILED', 'DATA_FAILED', 'VERIFICATION_FAILED') or stopped=1)
    </update>

    <update id="setJobDeleted">
        update job set deleted=1 where id=#{id}
    </update>

    <select id="getNameAndIdOfJobs" resultType="Map">
        select id, description from job;
    </select>
</mapper>