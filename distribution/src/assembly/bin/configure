#
# Copyright 1999-2021 Alibaba Group Holding Ltd.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#!/bin/bash

set -e
CUR_DIR=$(pwd)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export MMA_HOME=$(dirname ${DIR})

MMA_VERSION=$(cat ${MMA_HOME}/version.txt)

MMA_SERVER_CONFIG_PATH="${MMA_HOME}/conf/mma_server_config.json"

# hive metastore uri
HIVE_METASTORE_URIS_PROMPT="Please input Hive metastore URI(s):"
HIVE_METASTORE_URIS_HELP="See: \"hive.metastore.uris\" in hive-site.xml"
HIVE_METASTORE_URIS_EXAMPLE="thrift://localhost:9083"
# hive kerberos principal
HIVE_METASTORE_KERBEROS_PRINCIPAL_PROMPT="Please input the Kerberos principal"
HIVE_METASTORE_KERBEROS_PRINCIPAL_HELP="See: \"hive.metastore.kerberos.principal\" in hive-site.xml"
HIVE_METASTORE_KERBEROS_PRINCIPAL_EXAMPLE="hive/_HOST@EXAMPLE.COM"
# hive metastore keytab file
HIVE_METASTORE_KERBEROS_KEYTAB_FILE_PROMPT="Please input the Kerberos keytab file path"
HIVE_METASTORE_KERBEROS_KEYTAB_FILE_HELP="See: \"hive.metastore.kerberos.keytab.file\" in hive-site.xml"
HIVE_METASTORE_KERBEROS_KEYTAB_FILE_EXAMPLE=""
# hive jdbc connection url
HIVE_JDBC_CONN_URL_PROMPT="Please input Hive JDBC connection string"
HIVE_JDBC_CONN_URL_HELP="Same as the connection string used in beeline, which starts with jdbc:hive2"
HIVE_JDBC_CONN_URL_EXAMPLE="jdbc:hive2://localhost:10000"
# hive jdbc connection user
HIVE_JDBC_CONN_USER_PROMPT="Please input Hive JDBC user name"
HIVE_JDBC_CONN_USER_HELP="Same as the user name used in beeline. The default value is \"Hive\""
HIVE_JDBC_CONN_USER_EXAMPLE="Hive"
# hive jdbc connection password
HIVE_JDBC_CONN_PW_PROMPT="Please input Hive JDBC password"
HIVE_JDBC_CONN_PW_HELP="Same as the password used in beeline"
HIVE_JDBC_CONN_PW_EXAMPLE=""
# java security auth login config
JAVA_SECURITY_AUTH_LOGIN_CONFIG_PROMPT="Please input the path of jaas-gss.conf"
JAVA_SECURITY_AUTH_LOGIN_CONFIG_HELP="See: the document and conf/gss-jaas.conf.template"
JAVA_SECURITY_AUTH_LOGIN_CONFIG_EXAMPLE=""
# java security krb5 config
JAVA_SECURITY_KRB5_CONF_PROMPT="Please input the path of krb5.conf"
JAVA_SECURITY_KRB5_CONF_HELP="Normally in the directory /etc"
JAVA_SECURITY_KRB5_CONF_EXAMPLE=""
# mc endpoint
MC_ENDPOINT_PROMPT="Please input MaxCompute endpoint"
MC_ENDPOINT_HELP="See: https://help.aliyun.com/document_detail/34951.html"
MC_ENDPOINT_EXAMPLE="http://service.cn.maxcompute.aliyun-inc.com/api"
# mc project name
MC_PROJECT_NAME_PROMPT="Please input MaxCompute project name"
MC_PROJECT_NAME_HELP="The target MaxCompute project"
MC_PROJECT_NAME_EXAMPLE=""
# aliyun access id
ALIYUN_ACCESS_ID_PROMPT="Please input Alibaba cloud accesskey id"
ALIYUN_ACCESS_ID_HELP="See: https://help.aliyun.com/document_detail/27803.html"
ALIYUN_ACCESS_ID_EXAMPLE=""
# aliyun access key
ALIYUN_ACCESS_KEY_PROMPT="Please input Alibaba accesskey secret"
ALIYUN_ACCESS_KEY_HELP="See: https://help.aliyun.com/document_detail/27803.html"
ALIYUN_ACCESS_KEY_EXAMPLE=""

function PRINTLN_STDERR()
{
    printf "${1}\n" 1>&2
}

function PRINT_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_BLUE()
{
    printf "\033[1;34m${1}\n\e[0m" 1 >&2
}

function PRINTLN_STDERR_BOLD_YELLOW()
{
    printf "\033[1;33m${1}\n\e[0m" 1>&2
}

function PRINTLN_STDERR_BOLD_RED()
{
    printf "\033[1;31m${1}\n\e[0m" 1>&2
}

function GET_INPUT()
{
    QUESTION=$1
    HELP=$2
    EXAMPLE=$3
    PRINTLN_STDERR_BOLD_BLUE "$QUESTION"
    if [[ ${HELP} != "" ]]
    then
      PRINT_STDERR_BOLD_BLUE "HELP: "
      PRINTLN_STDERR "${HELP}"
    fi
    if [[ ${EXAMPLE} != "" ]]
    then
      PRINT_STDERR_BOLD_BLUE "EXAMPLE: "
      PRINTLN_STDERR "${EXAMPLE}"
    fi
    read -p ">" INPUT
    echo ${INPUT}
}

function ADD_OR_REPLACE()
{
    KEY=$1
    VALUE=$2
    COMMA=$3
    if grep -q "${KEY}" "${MMA_SERVER_CONFIG_PATH}"; then
      sed -i "/\"${KEY}\":/c\  \"${KEY}\":\"${VALUE}\"${COMMA}" ${MMA_SERVER_CONFIG_PATH}
    else
      echo "  \"${KEY}\":\"${VALUE}\"${COMMA}" >> ${MMA_SERVER_CONFIG_PATH}
    fi
}

function CONFIGURE_HIVE_BASIC()
{
    HIVE_METASTORE_URIS=$(GET_INPUT \
    "$HIVE_METASTORE_URIS_PROMPT" "$HIVE_METASTORE_URIS_HELP" "$HIVE_METASTORE_URIS_EXAMPLE")
    ADD_OR_REPLACE "mma.metadata.source.hive.metastore.uris" "${HIVE_METASTORE_URIS}" ","
    HIVE_JDBC_CONN_URL=$(GET_INPUT \
    "$HIVE_JDBC_CONN_URL_PROMPT" "$HIVE_JDBC_CONN_URL_HELP" "$HIVE_JDBC_CONN_URL_EXAMPLE")
    ADD_OR_REPLACE "mma.data.source.hive.jdbc.url" "${HIVE_JDBC_CONN_URL}" ","
    HIVE_JDBC_CONN_USER=$(GET_INPUT \
    "$HIVE_JDBC_CONN_USER_PROMPT" "$HIVE_JDBC_CONN_USER_HELP" "$HIVE_JDBC_CONN_USER_EXAMPLE")
    ADD_OR_REPLACE "mma.data.source.hive.jdbc.username" "${HIVE_JDBC_CONN_USER}" ","
    HIVE_JDBC_CONN_PW=$(GET_INPUT \
    "$HIVE_JDBC_CONN_PW_PROMPT" "$HIVE_JDBC_CONN_PW_HELP" "$HIVE_JDBC_CONN_PW_EXAMPLE")
    ADD_OR_REPLACE "mma.data.source.hive.jdbc.password" "${HIVE_JDBC_CONN_PW}" ","
}

function CONFIGURE_HIVE_SECURITY()
{
    JAVA_SECURITY_AUTH_LOGIN_CONFIG=$(GET_INPUT \
    "$JAVA_SECURITY_AUTH_LOGIN_CONFIG_PROMPT" "$JAVA_SECURITY_AUTH_LOGIN_CONFIG_HELP" \
    "$JAVA_SECURITY_AUTH_LOGIN_CONFIG_EXAMPLE")
    ADD_OR_REPLACE "java.security.auth.login.config" "${JAVA_SECURITY_AUTH_LOGIN_CONFIG}" ","
    JAVA_SECURITY_KRB5_CONF=$(GET_INPUT \
    "$JAVA_SECURITY_KRB5_CONF_PROMPT" "$JAVA_SECURITY_KRB5_CONF_HELP" \
    "$JAVA_SECURITY_KRB5_CONF_EXAMPLE")
    ADD_OR_REPLACE "java.security.krb5.conf" "${JAVA_SECURITY_KRB5_CONF}" ","
    ADD_OR_REPLACE "javax.security.auth.useSubjectCredsOnly" "false" ","
    ADD_OR_REPLACE "mma.metadata.source.hive.metastore.sasl.enabled" "true" ","
    HIVE_METASTORE_KERBEROS_PRINCIPAL=$(GET_INPUT \
    "$HIVE_METASTORE_KERBEROS_PRINCIPAL_PROMPT" "$HIVE_METASTORE_KERBEROS_PRINCIPAL_HELP" \
    "$HIVE_METASTORE_KERBEROS_PRINCIPAL_EXAMPLE")
    ADD_OR_REPLACE "mma.metadata.source.hive.metastore.kerberos.principal" "${HIVE_METASTORE_KERBEROS_PRINCIPAL}" ","
    HIVE_METASTORE_KERBEROS_KEYTAB_FILE=$(GET_INPUT \
    "$HIVE_METASTORE_KERBEROS_KEYTAB_FILE_PROMPT" "$HIVE_METASTORE_KERBEROS_KEYTAB_FILE_HELP" \
    "$HIVE_METASTORE_KERBEROS_KEYTAB_FILE_EXAMPLE")
    ADD_OR_REPLACE "mma.metadata.source.hive.metastore.kerberos.keytab.file" "${HIVE_METASTORE_KERBEROS_KEYTAB_FILE}" ","
}

function PRINT_CONFIGURE_HIVE_UDTF_GUIDANCE()
{
    PRINTLN_STDERR_BOLD_BLUE "Upload Hive UDTF resource jar to HDFS: "
    PRINTLN_STDERR "hdfs dfs -put -f ${MMA_HOME}/lib/data-transfer-hive-udtf-${MMA_VERSION}-jar-with-dependencies.jar hdfs:///tmp/"
    PRINTLN_STDERR_BOLD_BLUE "Create Hive function in beeline: "
    PRINTLN_STDERR "DROP FUNCTION IF EXISTS default.odps_data_dump_multi;"
    PRINTLN_STDERR "CREATE FUNCTION default.odps_data_dump_multi as 'com.aliyun.odps.mma.io.McDataTransmissionUDTF' USING JAR 'hdfs:///tmp/data-transfer-hive-udtf-${MMA_VERSION}-jar-with-dependencies.jar';"
}

function CONFIGURE_MC()
{
    MC_ENDPOINT=$(GET_INPUT "$MC_ENDPOINT_PROMPT" "$MC_ENDPOINT_HELP" "$MC_ENDPOINT_EXAMPLE")
    if [[ ${MC_ENDPOINT} == *"aliyun.com"* ]]
    then
        PRINTLN_STDERR_BOLD_RED "WARNING: Using a MaxCompute endpoint for the Internet. Normally, a endpoint for VPC should be used."
    fi
    ADD_OR_REPLACE "mma.data.dest.mc.endpoint" "${MC_ENDPOINT}" ","
    MC_PROJECT_NAME=$(GET_INPUT \
    "$MC_PROJECT_NAME_PROMPT" "$MC_PROJECT_NAME_HELP" "$MC_PROJECT_NAME_EXAMPLE")
    ADD_OR_REPLACE "mma.job.execution.mc.project" "${MC_PROJECT_NAME}" ","
    ALIYUN_ACCESS_ID=$(GET_INPUT \
    "$ALIYUN_ACCESS_ID_PROMPT" "$ALIYUN_ACCESS_ID_HELP" "$ALIYUN_ACCESS_ID_EXAMPLE")
    ADD_OR_REPLACE "mma.data.dest.mc.access.key.id" "${ALIYUN_ACCESS_ID}" ","
    ALIYUN_ACCESS_KEY=$(GET_INPUT \
    "$ALIYUN_ACCESS_KEY_PROMPT" "$ALIYUN_ACCESS_KEY_HELP" "$ALIYUN_ACCESS_KEY_EXAMPLE")
    ADD_OR_REPLACE "mma.data.dest.mc.access.key.secret" "${ALIYUN_ACCESS_KEY}" ","

    ADD_OR_REPLACE "mma.metadata.dest.mc.endpoint" "${MC_ENDPOINT}" ","
    ADD_OR_REPLACE "mma.metadata.dest.mc.access.key.id" "${ALIYUN_ACCESS_ID}" ","
    ADD_OR_REPLACE "mma.metadata.dest.mc.access.key.secret" "${ALIYUN_ACCESS_KEY}" ","
}

function CONFIGURE_SOURCE_AND_DEST()
{
    ADD_OR_REPLACE "mma.metadata.source.type" "Hive" ","
    ADD_OR_REPLACE "mma.data.source.type" "Hive" ","
    ADD_OR_REPLACE "mma.metadata.dest.type" "MaxCompute" ","
    ADD_OR_REPLACE "mma.data.dest.type" "MaxCompute" ","
    ADD_OR_REPLACE "mma.metadata.source.hive.impl" "HMS" ","
}

function CONFIGURE_METADATA_DB()
{
    ADD_OR_REPLACE "mma.meta.db.type" "h2" ","
    ADD_OR_REPLACE "mma.meta.db.jdbc.url" "jdbc:h2:file:${MMA_HOME}/.MmaMeta;AUTO_SERVER=TRUE" ","
    ADD_OR_REPLACE "mma.meta.db.jdbc.username" "mma" ","
    # not ends with a comma since this is the last line
    ADD_OR_REPLACE "mma.meta.db.jdbc.password" "mma" ""
}

function ENABLE_DATA_VERIFICATION() {
  PRINTLN_STDERR ""
  enable_data_verification=$(GET_INPUT "Enable data verification? (Y/N)" "" "")

  while true; do
    case ${enable_data_verification} in
          [Yy]) ADD_OR_REPLACE "mma.data.enable.verification" "true" ","; break;;
          [Nn]) ADD_OR_REPLACE "mma.data.enable.verification" "false" ","; break;;
          *) PRINTLN_STDERR "Please input 'Y' or 'N'";;
    esac
  done
}

rm -f "${MMA_SERVER_CONFIG_PATH}"
touch ${MMA_SERVER_CONFIG_PATH};
echo "{" >> ${MMA_SERVER_CONFIG_PATH}

# remove the '}' at the end of file
sed -i '/}/c\' ${MMA_SERVER_CONFIG_PATH}

# Hive basic configurations
PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Hive configurations"
CONFIGURE_HIVE_BASIC

# Hive security configurations
PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Hive security configurations"
while true; do
    HAS_SECURITY_CONFIG=$(GET_INPUT "Has Kerberos authentication? (Y/N)" "" "")
    case ${HAS_SECURITY_CONFIG} in
        [Yy]) CONFIGURE_HIVE_SECURITY; break;;
        [Nn]) break;;
        *) PRINTLN_STDERR "Please input 'Y' or 'N'";;
    esac
done

# MaxCompute configurations
PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "MaxCompute configurations"
CONFIGURE_MC

PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Generating MMA server configuration"
ENABLE_DATA_VERIFICATION
CONFIGURE_SOURCE_AND_DEST
CONFIGURE_METADATA_DB
# append a '}' at the end of file
echo "}" >> "${MMA_SERVER_CONFIG_PATH}"

PRINTLN_STDERR_BOLD_YELLOW "MMA server configuration file path: ${MMA_SERVER_CONFIG_PATH}"

PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Validating MMA server configurations"
java -Dlog4j.configurationFile="$MMA_HOME/res/mma_client_log4j2.xml" \
     -cp "$MMA_HOME/lib/*:$MMA_HOME/lib/client/*" \
     com.aliyun.odps.mma.client.MmaConfigurationValidator \
     --config "${MMA_SERVER_CONFIG_PATH}"
PRINTLN_STDERR_BOLD_YELLOW "Passed"

PRINTLN_STDERR ""
PRINTLN_STDERR_BOLD_YELLOW "Please execute the following commands manually to create required Hive UDTF"
PRINT_CONFIGURE_HIVE_UDTF_GUIDANCE
GET_INPUT "Press \"ENTER\" to confirm that the Hive UDTF has been created successfully" "" ""

PRINTLN_STDERR_BOLD_YELLOW "Congratulations! The configuration is completed!"
